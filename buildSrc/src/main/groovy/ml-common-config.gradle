plugins {
    id 'java-library'
    id 'maven-publish'
}

base {
    archivesName = "${mod_name}-${project.name}-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

repositories {
    mavenCentral()
    
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}

		filter {
			includeGroup "maven.modrinth"
		}
	}

    exclusiveContent {
        forRepository {
            maven {
                name = 'Parchment'
                url = uri("https://maven.parchmentmc.org")
            }
        }
        filter {
            includeGroupAndSubgroups("org.parchmentmc")
        }
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.1.0'
}

['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
	
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

processResources {
    def expandProps = [
            "version"						: project.version,
            "group"							: project.group,
            "mod_name"						: project.mod_name,
            "authors"						: project.authors,
            "mod_id"						: project.mod_id,
            "license"						: project.license,
            "description"					: project.description,
            "homepage_url"					: project.homepage_url,
            "sources_url"					: project.sources_url,
            "issues_url"					: project.issues_url,
            "java_version"					: project.java_version,
            "minecraft_version"				: project.minecraft_version,
            "minecraft_version_range"		: project.minecraft_version_range,
            "fabric_api_version"			: project.fabric_api_version,
            "fabric_loader_version"			: project.fabric_loader_version,
            "neoforge_version"				: project.neoforge_version,
            "neoforge_version_range"		: project.neoforge_version_range,
            "neoforge_loader_version_range"	: project.neoforge_loader_version_range,
            "forge_version"		    		: project.forge_version,
            "forge_version_range"		    : project.forge_version_range,
            "forge_loader_version_range"	: project.forge_loader_version_range
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
	
    inputs.properties(expandProps)
}

jar {
    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : authors,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : authors,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
	
    repositories {
        maven {
            name = "Cloudsmith"
            url "${maven_url}"
			
            credentials {
                username System.getenv("CLOUDSMITH_USERNAME")
                password System.getenv("CLOUDSMITH_API_KEY")
            }
        }
    }
}