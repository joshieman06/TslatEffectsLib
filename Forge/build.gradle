plugins {
    id 'ml-platform-config'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id "com.modrinth.minotaur" version "2.+"
}

def accessTransformersFile = file('src/main/resources/META-INF/accesstransformer.cfg')

if (accessTransformersFile.exists())
    minecraft.accessTransformer accessTransformersFile

minecraft {
    mappings channel: mappings_channel, version: "${mappings_mc_version}-${parchment_version}-${minecraft_version}"
    copyIdeResources = true
    reobf = false
	
	runs {
        configureEach {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"

            source sourceSets.main
            source project(":common").sourceSets.main
        }

        client {
            taskName 'Client'
        }

        server {
            taskName 'Server'
            args '--nogui'
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_processor_version}:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    runtimeOnly(annotationProcessor("io.github.llamalad7:mixinextras-forge:0.3.5"))
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    jarJar(group: 'io.github.llamalad7', name: 'mixinextras-common', version: "[0.3.5,)")
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

processResources {
	exclude '**/*.accesswidener'
}

task publishToCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_TOKEN") ?: "Invalid/No API Token Found"

    def mainFile = upload(curseforge_id, jar)
    mainFile.releaseType = "release"
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java ${java_version}")
    mainFile.changelog = "${changelog_url}"
    mainFile.displayName = base.archivesName.get()

    //https://github.com/Darkhax/CurseForgeGradle#available-properties
}

modrinth {
    token = System.getenv("modrinthKey")
    projectId = mod_id
    versionNumber = project.version
    versionType = "release"
    uploadFile = jar
    gameVersions = ["${minecraft_version}"]
    loaders = ["forge"]
}